
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /data-ssd/home/zihanxu/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/spm/src/spm.v
Parsing SystemVerilog input from `/openlane/designs/spm/src/spm.v' to AST representation.
Storing AST representation for module `$abstract\spm'.
Storing AST representation for module `$abstract\delayed_serial_adder'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/spm/src/asd.v
Parsing SystemVerilog input from `/openlane/designs/spm/src/asd.v' to AST representation.
Storing AST representation for module `$abstract\SCFIFO_128x64_withCount'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\spm'.
Generating RTLIL representation for module `\spm'.

5.1. Analyzing design hierarchy..
Top module:  \spm

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\delayed_serial_adder'.
Generating RTLIL representation for module `\delayed_serial_adder'.

5.3. Analyzing design hierarchy..
Top module:  \spm
Used module:     \delayed_serial_adder

5.4. Analyzing design hierarchy..
Top module:  \spm
Used module:     \delayed_serial_adder
Removing unused module `$abstract\SCFIFO_128x64_withCount'.
Removing unused module `$abstract\delayed_serial_adder'.
Removing unused module `$abstract\spm'.
Removed 3 unused modules.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/spm/runs/RUN_2025.07.05_11.28.18/tmp/synthesis/hierarchy.dot'.
Dumping module spm to page 1.
Renaming module spm to spm.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \spm
Used module:     \delayed_serial_adder

8.2. Analyzing design hierarchy..
Top module:  \spm
Used module:     \delayed_serial_adder
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/spm/src/spm.v:63$5 in module delayed_serial_adder.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\delayed_serial_adder.$proc$/openlane/designs/spm/src/spm.v:63$5'.

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\delayed_serial_adder.$proc$/openlane/designs/spm/src/spm.v:63$5'.
     1/2: $0\y_out[0:0]
     2/2: $0\last_carry[0:0]

16. Executing PROC_DLATCH pass (convert process syncs to latches).

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\delayed_serial_adder.\y_out' using process `\delayed_serial_adder.$proc$/openlane/designs/spm/src/spm.v:63$5'.
  created $adff cell `$procdff$7' with positive edge clock and negative level reset.
Creating register for signal `\delayed_serial_adder.\last_carry' using process `\delayed_serial_adder.$proc$/openlane/designs/spm/src/spm.v:63$5'.
  created $adff cell `$procdff$8' with positive edge clock and negative level reset.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `delayed_serial_adder.$proc$/openlane/designs/spm/src/spm.v:63$5'.
Cleaned up 0 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module spm...
Checking module delayed_serial_adder...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.
Optimizing module delayed_serial_adder.

22. Executing FLATTEN pass (flatten design).
Deleting now unused module delayed_serial_adder.
<suppressed ~32 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.
<suppressed ~1 debug messages>

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 32 unused cells and 161 unused wires.
<suppressed ~34 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

25.9. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

27.9. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port A of cell spm.$flatten\dsa[0].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spm:
  creating $macc model for $flatten\dsa[0].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[10].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[10].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[11].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[11].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[12].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[12].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[13].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[13].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[14].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[14].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[15].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[15].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[16].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[16].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[17].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[17].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[18].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[18].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[19].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[19].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[1].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[1].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[20].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[20].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[21].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[21].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[22].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[22].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[23].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[23].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[24].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[24].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[25].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[25].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[26].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[26].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[27].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[27].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[28].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[28].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[29].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[29].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[2].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[2].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[30].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[30].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[31].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[31].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[3].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[3].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[4].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[4].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[5].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[5].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[6].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[6].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[7].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[7].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[8].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[8].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  creating $macc model for $flatten\dsa[9].$add$/openlane/designs/spm/src/spm.v:61$3 ($add).
  creating $macc model for $flatten\dsa[9].$add$/openlane/designs/spm/src/spm.v:61$4 ($add).
  merging $macc model for $flatten\dsa[9].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[9].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[8].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[8].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[7].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[7].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[6].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[6].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[5].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[5].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[4].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[4].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[3].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[3].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[31].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[31].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[30].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[30].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[2].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[2].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[29].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[29].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[28].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[28].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[27].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[27].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[26].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[26].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[25].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[25].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[24].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[24].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[23].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[23].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[22].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[22].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[21].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[21].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[20].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[20].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[1].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[1].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[19].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[19].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[18].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[18].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[17].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[17].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[16].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[16].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[15].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[15].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[14].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[14].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[13].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[13].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[12].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[12].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[11].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[11].$add$/openlane/designs/spm/src/spm.v:61$4.
  merging $macc model for $flatten\dsa[10].$add$/openlane/designs/spm/src/spm.v:61$3 into $flatten\dsa[10].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[29].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[23].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[31].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[22].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[27].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[21].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[3].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[20].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[2].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[1].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[4].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[19].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[26].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[18].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[5].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[17].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[28].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[16].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[6].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[15].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[25].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[14].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[7].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[13].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[30].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[12].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[8].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[11].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[24].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[10].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[9].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu model for $macc $flatten\dsa[0].$add$/openlane/designs/spm/src/spm.v:61$4.
  creating $alu cell for $flatten\dsa[0].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$9
  creating $alu cell for $flatten\dsa[9].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$12
  creating $alu cell for $flatten\dsa[10].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$15
  creating $alu cell for $flatten\dsa[24].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$18
  creating $alu cell for $flatten\dsa[11].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$21
  creating $alu cell for $flatten\dsa[8].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$24
  creating $alu cell for $flatten\dsa[12].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$27
  creating $alu cell for $flatten\dsa[30].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$30
  creating $alu cell for $flatten\dsa[13].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$33
  creating $alu cell for $flatten\dsa[7].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$36
  creating $alu cell for $flatten\dsa[14].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$39
  creating $alu cell for $flatten\dsa[25].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$42
  creating $alu cell for $flatten\dsa[15].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$45
  creating $alu cell for $flatten\dsa[6].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$48
  creating $alu cell for $flatten\dsa[16].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$51
  creating $alu cell for $flatten\dsa[28].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$54
  creating $alu cell for $flatten\dsa[17].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$57
  creating $alu cell for $flatten\dsa[5].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$60
  creating $alu cell for $flatten\dsa[18].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$63
  creating $alu cell for $flatten\dsa[26].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$66
  creating $alu cell for $flatten\dsa[19].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$69
  creating $alu cell for $flatten\dsa[4].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$72
  creating $alu cell for $flatten\dsa[1].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$75
  creating $alu cell for $flatten\dsa[2].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$78
  creating $alu cell for $flatten\dsa[20].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$81
  creating $alu cell for $flatten\dsa[3].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$84
  creating $alu cell for $flatten\dsa[21].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$87
  creating $alu cell for $flatten\dsa[27].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$90
  creating $alu cell for $flatten\dsa[22].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$93
  creating $alu cell for $flatten\dsa[31].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$96
  creating $alu cell for $flatten\dsa[23].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$99
  creating $alu cell for $flatten\dsa[29].$add$/openlane/designs/spm/src/spm.v:61$4: $auto$alumacc.cc:485:replace_alu$102
  created 32 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 31 unused cells and 31 unused wires.
<suppressed ~32 debug messages>

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

33.9. Rerunning OPT passes. (Maybe there is more to do..)

33.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

33.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

33.16. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

38.10. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$1d1e68f77481583066c6d429218f48ea9d5739b3\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~711 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.
<suppressed ~291 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 32 unused cells and 835 unused wires.
<suppressed ~33 debug messages>

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\spm' to `<abc-temp-dir>/input.blif'..
Extracted 189 gates and 285 wires to a netlist network with 96 inputs and 64 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       32
ABC RESULTS:               XOR cells:       31
ABC RESULTS:              XNOR cells:       32
ABC RESULTS:            ANDNOT cells:       63
ABC RESULTS:                OR cells:       31
ABC RESULTS:        internal signals:      125
ABC RESULTS:           input signals:       96
ABC RESULTS:          output signals:       64
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 285 unused wires.
<suppressed ~33 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \spm

43.2. Analyzing design hierarchy..
Top module:  \spm
Removed 0 unused modules.

44. Printing statistics.

=== spm ===

   Number of wires:                420
   Number of wire bits:            514
   Number of public wires:         295
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                253
     $_ANDNOT_                      63
     $_DFF_PN0_                     64
     $_NAND_                        32
     $_OR_                          31
     $_XNOR_                        32
     $_XOR_                         31

45. Executing CHECK pass (checking for obvious problems).
Checking module spm...
Found and reported 0 problems.

46. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/spm/runs/RUN_2025.07.05_11.28.18/tmp/synthesis/post_techmap.dot'.
Dumping module spm to page 1.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spm.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spm'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spm.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 163 unused wires.
<suppressed ~163 debug messages>

50. Printing statistics.

=== spm ===

   Number of wires:                257
   Number of wire bits:            288
   Number of public wires:         132
   Number of public wire bits:     163
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                253
     $_ANDNOT_                      63
     $_DFF_PN0_                     64
     $_NAND_                        32
     $_OR_                          31
     $_XNOR_                        32
     $_XOR_                         31

mapping tbuf

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /data-ssd/home/zihanxu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/data-ssd/home/zihanxu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /data-ssd/home/zihanxu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/data-ssd/home/zihanxu/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\spm':
  mapped 64 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

56. Printing statistics.

=== spm ===

   Number of wires:                257
   Number of wire bits:            288
   Number of public wires:         132
   Number of public wire bits:     163
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                253
     $_ANDNOT_                      63
     $_NAND_                        32
     $_OR_                          31
     $_XNOR_                        32
     $_XOR_                         31
     sky130_fd_sc_hd__dfrtp_2       64

[INFO]: USING STRATEGY AREA 0

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\spm' to `/tmp/yosys-abc-5m6GyJ/input.blif'..
Extracted 189 gates and 285 wires to a netlist network with 96 inputs and 64 outputs.

57.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-5m6GyJ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-5m6GyJ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-5m6GyJ/input.blif 
ABC: + read_lib -w /openlane/designs/spm/runs/RUN_2025.07.05_11.28.18/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/spm/runs/RUN_2025.07.05_11.28.18/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.13 sec
ABC: Memory =    9.54 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/spm/runs/RUN_2025.07.05_11.28.18/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/spm/runs/RUN_2025.07.05_11.28.18/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (846.48 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    166 (  4.8 %)   Cap = 14.5 ff (  1.2 %)   Area =     1642.83 ( 95.2 %)   Delay =  1174.74 ps  ( 78.9 %)               
ABC: Path  0 --       4 : 0    1 pi                       A =   0.00  Df =   8.2   -5.1 ps  S =  17.7 ps  Cin =  0.0 ff  Cout =   2.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     161 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 230.2  -79.5 ps  S = 264.0 ps  Cin =  2.1 ff  Cout =  21.9 ff  Cmax = 130.0 ff  G = 1002  
ABC: Path  2 --     162 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 558.4 -182.4 ps  S = 342.0 ps  Cin =  2.1 ff  Cout =  28.8 ff  Cmax = 130.0 ff  G = 1322  
ABC: Path  3 --     171 : 3    2 sky130_fd_sc_hd__a21o_2  A =   8.76  Df = 754.7 -139.5 ps  S =  53.4 ps  Cin =  2.4 ff  Cout =   7.0 ff  Cmax = 309.5 ff  G =  289  
ABC: Path  4 --     174 : 2    1 sky130_fd_sc_hd__nand2_2 A =   6.26  Df = 920.6 -110.6 ps  S =  70.5 ps  Cin =  4.4 ff  Cout =   8.4 ff  Cmax = 295.7 ff  G =  186  
ABC: Path  5 --     175 : 2    1 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df =1174.7  -26.6 ps  S = 453.0 ps  Cin =  8.5 ff  Cout =  33.4 ff  Cmax = 121.8 ff  G =  394  
ABC: Start-point = pi3 (\x).  End-point = po2 (\dsa[20].y_out_next).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   96/   64  lat =    0  nd =   166  edge =    419  area =1643.14  delay = 5.00  lev = 5
ABC: + write_blif /tmp/yosys-abc-5m6GyJ/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       31
ABC RESULTS:        internal signals:      125
ABC RESULTS:           input signals:       96
ABC RESULTS:          output signals:       64
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spm..
Removed 0 unused cells and 285 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).

63. Executing CHECK pass (checking for obvious problems).
Checking module spm...
Found and reported 0 problems.

64. Printing statistics.

=== spm ===

   Number of wires:                234
   Number of wire bits:            265
   Number of public wires:         132
   Number of public wire bits:     163
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                230
     sky130_fd_sc_hd__a21bo_2       31
     sky130_fd_sc_hd__a21o_2        31
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__buf_1          8
     sky130_fd_sc_hd__dfrtp_2       64
     sky130_fd_sc_hd__nand2_2       31
     sky130_fd_sc_hd__nand3_2       31
     sky130_fd_sc_hd__nor2_2         1
     sky130_fd_sc_hd__xnor2_2       31

   Chip area for module '\spm': 3324.438400

65. Executing Verilog backend.
Dumping module `\spm'.

66. Executing JSON backend.

End of script. Logfile hash: ac659ff3b2, CPU: user 0.86s system 0.01s, MEM: 42.66 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 34% 2x abc (0 sec), 19% 2x read_liberty (0 sec), ...
